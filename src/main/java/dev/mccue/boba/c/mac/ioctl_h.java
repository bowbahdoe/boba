// Generated by jextract

package dev.mccue.boba.c.mac;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class ioctl_h {

    ioctl_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int TCGETS = (int)21505L;
    /**
     * {@snippet lang=c :
     * #define TCGETS 21505
     * }
     */
    public static int TCGETS() {
        return TCGETS;
    }
    private static final int TCSETS = (int)21506L;
    /**
     * {@snippet lang=c :
     * #define TCSETS 21506
     * }
     */
    public static int TCSETS() {
        return TCSETS;
    }
    private static final int EBADF = (int)9L;
    /**
     * {@snippet lang=c :
     * #define EBADF 9
     * }
     */
    public static int EBADF() {
        return EBADF;
    }
    private static final int EFAULT = (int)14L;
    /**
     * {@snippet lang=c :
     * #define EFAULT 14
     * }
     */
    public static int EFAULT() {
        return EFAULT;
    }
    private static final int EINVAL = (int)22L;
    /**
     * {@snippet lang=c :
     * #define EINVAL 22
     * }
     */
    public static int EINVAL() {
        return EINVAL;
    }
    private static final int ENOTTY = (int)25L;
    /**
     * {@snippet lang=c :
     * #define ENOTTY 25
     * }
     */
    public static int ENOTTY() {
        return ENOTTY;
    }
    private static final int VINTR = (int)0L;
    /**
     * {@snippet lang=c :
     * #define VINTR 0
     * }
     */
    public static int VINTR() {
        return VINTR;
    }
    private static final int VQUIT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define VQUIT 1
     * }
     */
    public static int VQUIT() {
        return VQUIT;
    }
    private static final int VERASE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define VERASE 2
     * }
     */
    public static int VERASE() {
        return VERASE;
    }
    private static final int VEOF = (int)4L;
    /**
     * {@snippet lang=c :
     * #define VEOF 4
     * }
     */
    public static int VEOF() {
        return VEOF;
    }
    private static final int VTIME = (int)5L;
    /**
     * {@snippet lang=c :
     * #define VTIME 5
     * }
     */
    public static int VTIME() {
        return VTIME;
    }
    private static final int VMIN = (int)6L;
    /**
     * {@snippet lang=c :
     * #define VMIN 6
     * }
     */
    public static int VMIN() {
        return VMIN;
    }
    private static final int VSTART = (int)8L;
    /**
     * {@snippet lang=c :
     * #define VSTART 8
     * }
     */
    public static int VSTART() {
        return VSTART;
    }
    private static final int VSTOP = (int)9L;
    /**
     * {@snippet lang=c :
     * #define VSTOP 9
     * }
     */
    public static int VSTOP() {
        return VSTOP;
    }
    private static final int VSUSP = (int)10L;
    /**
     * {@snippet lang=c :
     * #define VSUSP 10
     * }
     */
    public static int VSUSP() {
        return VSUSP;
    }
    private static final int VEOL = (int)11L;
    /**
     * {@snippet lang=c :
     * #define VEOL 11
     * }
     */
    public static int VEOL() {
        return VEOL;
    }
    private static final int VREPRINT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define VREPRINT 12
     * }
     */
    public static int VREPRINT() {
        return VREPRINT;
    }
    private static final int VDISCARD = (int)13L;
    /**
     * {@snippet lang=c :
     * #define VDISCARD 13
     * }
     */
    public static int VDISCARD() {
        return VDISCARD;
    }
    private static final int VWERASE = (int)14L;
    /**
     * {@snippet lang=c :
     * #define VWERASE 14
     * }
     */
    public static int VWERASE() {
        return VWERASE;
    }
    private static final int VLNEXT = (int)15L;
    /**
     * {@snippet lang=c :
     * #define VLNEXT 15
     * }
     */
    public static int VLNEXT() {
        return VLNEXT;
    }
    private static final int VEOL2 = (int)16L;
    /**
     * {@snippet lang=c :
     * #define VEOL2 16
     * }
     */
    public static int VEOL2() {
        return VEOL2;
    }
    private static final int IGNBRK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define IGNBRK 1
     * }
     */
    public static int IGNBRK() {
        return IGNBRK;
    }
    private static final int BRKINT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BRKINT 2
     * }
     */
    public static int BRKINT() {
        return BRKINT;
    }
    private static final int IGNPAR = (int)4L;
    /**
     * {@snippet lang=c :
     * #define IGNPAR 4
     * }
     */
    public static int IGNPAR() {
        return IGNPAR;
    }
    private static final int PARMRK = (int)8L;
    /**
     * {@snippet lang=c :
     * #define PARMRK 8
     * }
     */
    public static int PARMRK() {
        return PARMRK;
    }
    private static final int INPCK = (int)16L;
    /**
     * {@snippet lang=c :
     * #define INPCK 16
     * }
     */
    public static int INPCK() {
        return INPCK;
    }
    private static final int ISTRIP = (int)32L;
    /**
     * {@snippet lang=c :
     * #define ISTRIP 32
     * }
     */
    public static int ISTRIP() {
        return ISTRIP;
    }
    private static final int INLCR = (int)64L;
    /**
     * {@snippet lang=c :
     * #define INLCR 64
     * }
     */
    public static int INLCR() {
        return INLCR;
    }
    private static final int IGNCR = (int)128L;
    /**
     * {@snippet lang=c :
     * #define IGNCR 128
     * }
     */
    public static int IGNCR() {
        return IGNCR;
    }
    private static final int ICRNL = (int)256L;
    /**
     * {@snippet lang=c :
     * #define ICRNL 256
     * }
     */
    public static int ICRNL() {
        return ICRNL;
    }
    private static final int IXON = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define IXON 1024
     * }
     */
    public static int IXON() {
        return IXON;
    }
    private static final int IXANY = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define IXANY 2048
     * }
     */
    public static int IXANY() {
        return IXANY;
    }
    private static final int IXOFF = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define IXOFF 4096
     * }
     */
    public static int IXOFF() {
        return IXOFF;
    }
    private static final int IMAXBEL = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define IMAXBEL 8192
     * }
     */
    public static int IMAXBEL() {
        return IMAXBEL;
    }
    private static final int OPOST = (int)1L;
    /**
     * {@snippet lang=c :
     * #define OPOST 1
     * }
     */
    public static int OPOST() {
        return OPOST;
    }
    private static final int ONLCR = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ONLCR 4
     * }
     */
    public static int ONLCR() {
        return ONLCR;
    }
    private static final int OCRNL = (int)8L;
    /**
     * {@snippet lang=c :
     * #define OCRNL 8
     * }
     */
    public static int OCRNL() {
        return OCRNL;
    }
    private static final int ONOCR = (int)16L;
    /**
     * {@snippet lang=c :
     * #define ONOCR 16
     * }
     */
    public static int ONOCR() {
        return ONOCR;
    }
    private static final int ONLRET = (int)32L;
    /**
     * {@snippet lang=c :
     * #define ONLRET 32
     * }
     */
    public static int ONLRET() {
        return ONLRET;
    }
    private static final int CSIZE = (int)48L;
    /**
     * {@snippet lang=c :
     * #define CSIZE 48
     * }
     */
    public static int CSIZE() {
        return CSIZE;
    }
    private static final int CS7 = (int)32L;
    /**
     * {@snippet lang=c :
     * #define CS7 32
     * }
     */
    public static int CS7() {
        return CS7;
    }
    private static final int CS8 = (int)48L;
    /**
     * {@snippet lang=c :
     * #define CS8 48
     * }
     */
    public static int CS8() {
        return CS8;
    }
    private static final int PARENB = (int)256L;
    /**
     * {@snippet lang=c :
     * #define PARENB 256
     * }
     */
    public static int PARENB() {
        return PARENB;
    }
    private static final int PARODD = (int)512L;
    /**
     * {@snippet lang=c :
     * #define PARODD 512
     * }
     */
    public static int PARODD() {
        return PARODD;
    }
    private static final int ISIG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ISIG 1
     * }
     */
    public static int ISIG() {
        return ISIG;
    }
    private static final int ICANON = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ICANON 2
     * }
     */
    public static int ICANON() {
        return ICANON;
    }
    private static final int ECHO = (int)8L;
    /**
     * {@snippet lang=c :
     * #define ECHO 8
     * }
     */
    public static int ECHO() {
        return ECHO;
    }
    private static final int ECHOE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define ECHOE 16
     * }
     */
    public static int ECHOE() {
        return ECHOE;
    }
    private static final int ECHOK = (int)32L;
    /**
     * {@snippet lang=c :
     * #define ECHOK 32
     * }
     */
    public static int ECHOK() {
        return ECHOK;
    }
    private static final int ECHONL = (int)64L;
    /**
     * {@snippet lang=c :
     * #define ECHONL 64
     * }
     */
    public static int ECHONL() {
        return ECHONL;
    }
    private static final int NOFLSH = (int)128L;
    /**
     * {@snippet lang=c :
     * #define NOFLSH 128
     * }
     */
    public static int NOFLSH() {
        return NOFLSH;
    }
    private static final int TOSTOP = (int)256L;
    /**
     * {@snippet lang=c :
     * #define TOSTOP 256
     * }
     */
    public static int TOSTOP() {
        return TOSTOP;
    }
    private static final int ECHOCTL = (int)512L;
    /**
     * {@snippet lang=c :
     * #define ECHOCTL 512
     * }
     */
    public static int ECHOCTL() {
        return ECHOCTL;
    }
    private static final int ECHOKE = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define ECHOKE 2048
     * }
     */
    public static int ECHOKE() {
        return ECHOKE;
    }
    private static final int PENDIN = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define PENDIN 16384
     * }
     */
    public static int PENDIN() {
        return PENDIN;
    }
    private static final int IEXTEN = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define IEXTEN 32768
     * }
     */
    public static int IEXTEN() {
        return IEXTEN;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int ioctl(int __fd, unsigned long __request, ...)
     * }
     */
    public static class ioctl {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                ioctl_h.C_INT,
                ioctl_h.C_INT,
                ioctl_h.C_LONG
            );
        private static final MemorySegment ADDR = ioctl_h.findOrThrow("ioctl");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private ioctl(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int ioctl(int __fd, unsigned long __request, ...)
         * }
         */
        public static ioctl makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new ioctl(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(int __fd, long __request, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("ioctl", __fd, __request, x2);
                }
                return (int)spreader.invokeExact(__fd, __request, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class tcgetattr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ioctl_h.C_INT,
            ioctl_h.C_INT,
            ioctl_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    ioctl_h.findOrThrow("tcgetattr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int tcgetattr(int __fd, struct termios *__termios_p)
     * }
     */
    public static FunctionDescriptor tcgetattr$descriptor() {
        return tcgetattr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int tcgetattr(int __fd, struct termios *__termios_p)
     * }
     */
    public static MethodHandle tcgetattr$handle() {
        return tcgetattr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int tcgetattr(int __fd, struct termios *__termios_p)
     * }
     */
    public static int tcgetattr(int __fd, MemorySegment __termios_p) {
        var mh$ = tcgetattr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tcgetattr", __fd, __termios_p);
            }
            return (int)mh$.invokeExact(__fd, __termios_p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tcsetattr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ioctl_h.C_INT,
            ioctl_h.C_INT,
            ioctl_h.C_INT,
            ioctl_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    ioctl_h.findOrThrow("tcsetattr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int tcsetattr(int __fd, int __optional_actions, const struct termios *__termios_p)
     * }
     */
    public static FunctionDescriptor tcsetattr$descriptor() {
        return tcsetattr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int tcsetattr(int __fd, int __optional_actions, const struct termios *__termios_p)
     * }
     */
    public static MethodHandle tcsetattr$handle() {
        return tcsetattr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int tcsetattr(int __fd, int __optional_actions, const struct termios *__termios_p)
     * }
     */
    public static int tcsetattr(int __fd, int __optional_actions, MemorySegment __termios_p) {
        var mh$ = tcsetattr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tcsetattr", __fd, __optional_actions, __termios_p);
            }
            return (int)mh$.invokeExact(__fd, __optional_actions, __termios_p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

